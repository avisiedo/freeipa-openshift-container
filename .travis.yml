---
# https://docs.travis-ci.com/user/environment-variables/
language: generic
dist: xenial
sudo: required

services:
  - docker

before_install:
  - if test -n "$ca" ; then sudo apt-get install -y libnss3-tools ; fi

install: true

before_script:
  - TRAVIS_COMMIT_RANGE=${TRAVIS_COMMIT_RANGE:-$TRAVIS_COMMIT~..$TRAVIS_COMMIT} && echo "$TRAVIS_COMMIT_RANGE"
  - export TRAVIS_COMMIT_RANGE=${TRAVIS_COMMIT_RANGE/.../..} && echo "$TRAVIS_COMMIT_RANGE"
  - export FILES_CHANGED=$( git diff --name-only $TRAVIS_COMMIT_RANGE | sort ) && echo "$FILES_CHANGED"
  - export TRAVIS_DOCKERFILES=$( sed 's/^ *env. dockerfile=/Dockerfile./;s/ .*//;/^Dockerfile/p;d' .travis.yml | sort --unique ) && echo "$TRAVIS_DOCKERFILES"
  - export BUILD_DOCKERFILES=$( grep '^Dockerfile\.' <( echo "$FILES_CHANGED" ) ) ; echo "$BUILD_DOCKERFILES"
  - export NONDOCKERFILES_CHANGED=$( grep -v '^Dockerfile\.' <( echo "$FILES_CHANGED" ) ) ; echo "$NONDOCKERFILES_CHANGED"
  - if test -z "$FILES_CHANGED" || test -n "$NONDOCKERFILES_CHANGED" ; then export BUILD_DOCKERFILES=$TRAVIS_DOCKERFILES ; fi ; echo "$BUILD_DOCKERFILES"
  - if grep -F "Dockerfile.$dockerfile" <( echo "$BUILD_DOCKERFILES" ) ; then export RUN_DOCKER_BUILD=1 ; fi
  - perl -e 'print map "$_=$ENV{$_}".chr(10), sort keys %ENV'

stages:
  - sanity
  - lint
  - build
  - test

matrix:
  include:
    - stage: sanity
      script: if comm -23 <( echo "$FILES_CHANGED" ) <( echo "$TRAVIS_DOCKERFILES" ) | grep Dockerfile. ; then echo "Dockerfile modified but not tracked by Travis." >&2 ; exit 1 ; else echo "No unexpected Dockerfile changes, OK." ; fi

    - stage: lint
      script: |
        if test -n "$BUILD_DOCKERFILES"
        then
          for dockerfile in $BUILD_DOCKERFILES
          do
            echo ">> Linting '$dockerfile'"
            docker run --rm -it -v "$PWD:/data" -w "/data" hadolint/hadolint /bin/hadolint $dockerfile || true
          done
        fi

    - stage: build
      env: dockerfile=fedora-32 readonly=--read-only image_tag=dev-fedora-32-ro
    - stage: build
      env: dockerfile=fedora-32 ca=--external-ca readonly=--read-only image_tag=dev-fedora-32-ca-ro
    - stage: build
      env: dockerfile=fedora-32 image_tag=dev-fedora-32
    - stage: build
      env: dockerfile=fedora-31 image_tag=dev-fedora-31
    - stage: build
      env: dockerfile=centos-8 readonly=--read-only image_tag=dev-centos-8-ro
    - stage: build
      env: dockerfile=centos-8 ca=--external-ca readonly=--read-only image_tag=dev-centos-8-ca-ro
    - stage: build
      env: dockerfile=centos-8 image_tag=dev-centos-8
    - stage: build
      env: dockerfile=centos-7 image_tag=dev-centos-7
    - stage: build
      env: dockerfile=fedora-23 replica=none seccomp=unconfined readonly=--read-only image_tag=dev-fedora-23

  exclude:
    - stage: build
      env: dockerfile=rhel-7
    - stage: build
      env: dockerfile=rhel-8
    - stage: build
      env: dockerfile=fedora-rawhide
    - stage: build
      env: dockerfile=fedora-30
    - stage: build
      env: dockerfile=fedora-29
    - stage: build
      env: dockerfile=fedora-28
    - stage: build
      env: dockerfile=fedora-27
    - stage: build
      env: dockerfile=fedora-26 replica=none
    - stage: build
      env: dockerfile=fedora-25 seccomp=unconfined
    - stage: build
      env: dockerfile=fedora-24 replica=none seccomp=unconfined

script: |
  if test -n "$RUN_DOCKER_BUILD"
  then
    docker build -t local/freeipa-server -f Dockerfile.$dockerfile . || exit $?
    tests/run-master-and-replica.sh local/freeipa-server || exit $?
    if test -n "$image_tag"
    then
      export BAPI_DOCKERFILE="Dockerfile.$dockerfile"
      export BAPI_GIT_HASH="$( git rev-parse HEAD 2>/dev/null )"
      export BAPI_REMOTE_TAG="${CONTAINER_IMAGE_TAG_BASE}:${image_tag}-${BAPI_GIT_HASH}"
      [ -e $HOME/.docker ] || mkdir -p $HOME/.docker
      cat > $HOME/.docker/config.json <<EOF
  {
    "auths": {
      "quay.io": {
        "auth": "$( echo -n "${BAPI_USERNAME}:${BAPI_PASSWORD}" | base64 --wrap=0 )",
        "email": ""
      }
    }
  }
  EOF
      docker tag local/freeipa-server ${BAPI_REMOTE_TAG} || exit $?
      docker push ${BAPI_REMOTE_TAG} || exit $?
    fi
  fi

after_failure:
  - docker ps -aq | while read i ; do docker rm -f $i ; done
  - if test -n "$RUN_DOCKER_BUILD" ; then tests/run-partial-tests.sh Dockerfile.$dockerfile ; fi
